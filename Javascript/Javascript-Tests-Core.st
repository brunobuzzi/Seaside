WAContextTest subclass: #JSObjectTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!JSObjectTest subclass: #JSLoggingTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!JSObjectTest subclass: #JSStreamTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!JSObjectTest subclass: #JSConversionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!JSObjectTest subclass: #JSDecorationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!JSObjectTest subclass: #JSRenderingTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!JSObjectTest subclass: #JSJsonTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!JSObjectTest subclass: #JSScriptTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 13 April 2018 at 11:29:20.081263 am'!!GRPackage class methodsFor: '*javascript-tests-core' stamp: 'lr 2/17/2010 15:11'!javascriptTestsCore	^ self new		name: 'Javascript-Tests-Core';		description: 'Unit tests for the Javascript-Core package.';		addDependency: 'Javascript-Core';		addDependency: 'Seaside-Tests-Core';		url: #seasideUrl;		yourself! !WAContextTest subclass: #JSObjectTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!!JSObjectTest methodsFor: 'utilities' stamp: 'as 2/6/2011 22:02'!assert: aBlock renders: aString 	| html |	html := WAHtmlCanvas builder		documentClass: WAHtmlDocument;		rootClass: WAHtmlRoot;		fullDocument: false;		render: aBlock.	self 		assert: html = aString		description: 'Got ' , html printString , '; but expected ' , aString printString! !!JSObjectTest methodsFor: 'asserting' stamp: 'lr 1/28/2010 17:32'!assert: anObject equals: aString	self		assert: anObject asJavascript = aString		description: anObject asJavascript printString , ' expected to be ' , aString printString		resumable: true! !!JSObjectTest methodsFor: 'accessing-javascript' stamp: 'jf 7/19/2009 15:54'!javascript	^ JSScript context: self renderContext! !!JSObjectTest methodsFor: 'accessing-javascript' stamp: 'lr 10/13/2008 21:59'!mock	^ JSStream on: 'mock'! !!JSObjectTest methodsFor: 'accessing-javascript' stamp: 'lr 10/15/2008 21:43'!stream	^ JSStream new! !!JSObjectTest methodsFor: 'accessing' stamp: 'jf 7/19/2009 14:55'!renderContext	^ WARenderContext new		actionUrl: (WAUrl absolute: 'http://www.seaside.st/?_s=1&_k=a');		document: (WAHtmlDocument 			on: (WriteStream on: String new)			codec: self requestContext codec);		yourself! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JSObjectTest class	instanceVariableNames: ''!!JSObjectTest class methodsFor: 'accessing' stamp: 'lr 4/28/2009 19:43'!packageNamesUnderTest	^ #('Javascript-Core')! !!JSObjectTest class methodsFor: 'testing' stamp: 'lr 2/2/2010 21:57'!shouldInheritSelectors	^ true! !!JSObjectTest class methodsFor: 'testing' stamp: 'lr 11/15/2008 20:28'!isAbstract	^ self name = #JSObjectTest! !JSObjectTest subclass: #JSConversionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!!JSConversionTest methodsFor: 'tests-tools' stamp: 'lr 4/28/2009 20:37'!testIsJavascript	self deny: 123 isJavascript.	self assert: self mock isJavascript.	self assert: JSCreate new isJavascript! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 7/14/2010 13:20'!testJoinString	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -> 'bar')) 		equals: '"foo=bar"'.	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -> 'bar zork')) 		equals: '"foo=bar%20zork"'.	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -> 'bar&zork')) 		equals: '"foo=bar%26zork"'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 7/16/2009 08:52'!testStringSpecial	self assert: (String with: Character cr) equals: '"\r"'.	self assert: (String with: Character lf) equals: '"\n"'.	self assert: (String with: Character tab) equals: '"\t"'.	self assert: (String with: (Character codePoint: 0)) equals: '"\0"'.	self assert: (String with: (Character codePoint: 1)) equals: '"\x01"'.	self assert: (String with: (Character codePoint: 31)) equals: '"\x1f"'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 7/14/2010 13:13'!testJoinEmpty	self 		assert: (JSJoin new)		equals: '""'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 4/15/2010 20:27'!testDictionary	self 		assert: (GRSmallDictionary new				at: 'foo'					put: 1;				at: 'bar'					put: 2;				at: 'zork'					put: 3;				yourself)		equals: '{"foo":1,"bar":2,"zork":3}'.	self 		assert: (GRSmallDictionary new				at: ''					put: 'empty';				yourself)		equals: '{"":"empty"}'.	self 		assert: (Dictionary new				at: 1					put: 'not-a-string';				yourself)		equals: '{"1":"not-a-string"}'.	self 		assert: (Dictionary new				at: '1abc'					put: 'not-an-id';				yourself)		equals: '{"1abc":"not-an-id"}'.	self 		assert: (Dictionary new				at: 'abc1'					put: 'totally sexy';				yourself)		equals: '{"abc1":"totally sexy"}'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:48'!testUrl	self		assert: (WAUrl absolute: 'http://www.seaside.st/?1=a&2=b')		equals: '"http://www.seaside.st/?1=a&2=b"'! !!JSConversionTest methodsFor: 'tests' stamp: 'pmm 5/2/2012 20:16'!testStringSpecialLineTerminator	"		ECMA-262 v5.1 (June 2011) section 7.8.4 says that string literals cannot contain an unescaped LineTerminator, which is defined in		section 7.3 as the four characters <LF>, <CR>,  <LS> and  <PS> (U+000A, U+u000D, U+2028 and U+2029)				See also:			http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf			http://timelessrepo.com/json-isnt-a-javascript-subset	"	"<LF>"	self assert: (String with: (Character codePoint: 16r000A)) equals: '"\n"'.		"<CR>"	self assert: (String with: (Character codePoint: 16r000D)) equals: '"\r"'.		"<LS>"	self assert: (String with: (Character codePoint: 16r2028)) equals: '"\u2028"'.		"<PS>"	self assert: (String with: (Character codePoint: 16r2029)) equals: '"\u2029"'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:48'!testDateAndTime	self assert: (DateAndTime year: 1980 month: 6 day: 11 hour: 12 minute: 45 second: 23) equals: 'new Date(1980,5,11,12,45,23)'.	self assert: (Date year: 1980 month: 6 day: 11) equals: 'new Date(1980,5,11)'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:48'!testLiteral	self assert: true equals: 'true'.	self assert: false equals: 'false'.	self assert: nil equals: 'null'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:48'!testArray	self assert: #(1 2 3) equals: '[1,2,3]'! !!JSConversionTest methodsFor: 'tests' stamp: 'jf 2/6/2010 00:26'!testDuration	self assert: (Duration seconds: 1) equals: '1000'.	self assert: (Duration milliseconds: 1200) equals: '1200'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:48'!testStringBasic	self assert: 'abc' equals: '"abc"'.	self assert: '123' equals: '"123"'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 7/14/2010 13:20'!testJoinAssocation	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -> nil)) 		equals: '"foo"'.	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -> true)) 		equals: '"foo="+encodeURIComponent(true)'.	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -> 123)) 		equals: '"foo="+encodeURIComponent(123)'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 7/14/2010 13:14'!testJoinMultiple	self		assert: (JSJoin on: #('foo')) 		equals: '"foo"'.	self		assert: (JSJoin on: #('foo' 'bar'))		equals: '["foo","bar"].join("&")'! !!JSConversionTest methodsFor: 'tests' stamp: 'pmm 9/1/2012 15:56'!testNumber	self assert: 123 equals: '123'.	self assert: Float nan equals: 'NaN'.	self assert: Float infinity equals: 'Infinity'.	self assert: Float infinity * -1 equals: '-Infinity'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 7/16/2009 08:51'!testCharacter	self assert: (Character codePoint: 0) equals: '"\0"'.	self assert: Character lf equals: '"\n"'.	self assert: $a equals: '"a"'! !!JSConversionTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:48'!testStringEscaping	self assert: '''' equals: '"''"'.	self assert: '"' equals: '"\""'.	self assert: '\' equals: '"\\"'! !JSObjectTest subclass: #JSDecorationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!!JSDecorationTest methodsFor: 'tests' stamp: 'lr 9/22/2009 10:09'!testCall	self		assert: (self mock call: 'foo')		equals: 'mock.foo()'.	self		assert: (self mock call: nil)		equals: 'mock()'.	self		assert: (self mock call: '')		equals: 'mock()'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testReturn	self		assert: (self mock return: 1)		equals: 'mock;return 1'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testCondition	self		assert: (self mock condition: true)		equals: 'if(true){mock}'.	self		assert: (self mock condition: false)		equals: 'if(false){mock}'! !!JSDecorationTest methodsFor: 'tests' stamp: 'JohanBrichau 10/2/2014 21:18'!testConditionElse	self		assert: (self mock condition: true else: false)		equals: 'if(true){mock}else{false}'.	self		assert: (self mock condition: false else: true)		equals: 'if(false){mock}else{true}'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testAssignLocalTo	self		assert: (self mock assignLocalTo: 'x')		equals: 'var x=mock'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testAssignTo	self		assert: (self mock assignTo: 'x')		equals: 'x=mock'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testProperty	self		assert: (self mock property: 'foo')		equals: 'mock["foo"]'.	self		assert: (self mock property: 123)		equals: 'mock[123]'.	self		assert: (self mock property: 'foo'; assign: 'bar')		equals: 'mock["foo"]="bar"'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testNot	self		assert: self mock not		equals: '!!mock'.	self		assert: self mock not not		equals: '!!!!mock'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 9/22/2009 10:10'!testCallWithArguments	self		assert: (self mock call: 'foo' withArguments: #(1 2 3 4 5))		equals: 'mock.foo(1,2,3,4,5)'.	self		assert: (self mock call: nil withArguments: #(1 2 3 4 5))		equals: 'mock(1,2,3,4,5)'.	self		assert: (self mock call: '' withArguments: #(1 2 3 4 5))		equals: 'mock(1,2,3,4,5)'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testTimeout	| mock |	mock := self mock.	mock timeout: 123.	self assert: mock equals: 'setTimeout(function(){mock},123)'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testApply	self		assert: (self mock apply: #())		equals: 'mock()'.	self		assert: (self mock apply: #(1))		equals: 'mock(1)'.	self		assert: (self mock apply: #(1 true))		equals: 'mock(1,true)'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:01'!testInterval	self		assert: (self mock interval: 2 seconds)		equals: 'setInterval(function(){mock},2000)'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:01'!testAssign	self		assert: (self mock assign: 1)		equals: 'mock=1'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testConfirm	self		assert: (self mock confirm: 'Sure?')		equals: 'if(confirm("Sure?")){mock}'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 9/22/2009 10:10'!testCallWithWithWith	self		assert: (self mock call: 'foo' with: 1 with: 2 with: 3)		equals: 'mock.foo(1,2,3)'.	self		assert: (self mock call: nil with: 1 with: 2 with: 3)		equals: 'mock(1,2,3)'.	self		assert: (self mock call: '' with: 1 with: 2 with: 3)		equals: 'mock(1,2,3)'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testCreate	self		assert: self mock create		equals: 'new mock'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/14/2008 12:22'!testConcatenate	self		assert: (self mock , 2 , 3)		equals: 'mock;2;3'.	self		assert: (self mock , nil , self mock)		equals: 'mock;null;mock'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testThenElse	| mock |	mock := self mock.	mock then: 1.	self assert: mock equals: '(mock?1:null)'.	mock := self mock.	mock then: 1 else: 2.	self assert: mock equals: '(mock?1:2)'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 9/22/2009 10:09'!testCallWith	self		assert: (self mock call: 'foo' with: 1)		equals: 'mock.foo(1)'.	self		assert: (self mock call: nil with: 1)		equals: 'mock(1)'.	self		assert: (self mock call: '' with: 1)		equals: 'mock(1)'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 9/22/2009 10:10'!testCallWithWith	self		assert: (self mock call: 'foo' with: 1 with: 2)		equals: 'mock.foo(1,2)'.	self		assert: (self mock call: nil with: 1 with: 2)		equals: 'mock(1,2)'.	self		assert: (self mock call: '' with: 1 with: 2)		equals: 'mock(1,2)'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testAccess	self		assert: (self mock access: 'foo')		equals: 'mock.foo'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testAlias	| mock |	mock := self mock.	mock alias: 'foo'.	self assert: mock equals: 'foo'.	mock alias: 'bar'; call: 'zork'.	self assert: mock equals: 'bar.zork()'! !!JSDecorationTest methodsFor: 'tests' stamp: 'lr 10/13/2008 21:58'!testBinary	self		assert: (self mock & false)		equals: 'mock&&false'.	self		assert: (self mock | 1)		equals: 'mock||1'! !JSObjectTest subclass: #JSJsonTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!!JSJsonTest methodsFor: 'tests' stamp: 'lr 9/22/2009 10:51'!testParse	self 		assert: (self json parse: '[1,2]')		equals: 'JSON.parse("[1,2]")'.	self 		assert: (self json parse: '[1,2]' reviver: 'return null')		equals: 'JSON.parse("[1,2]",function(){return null})'! !!JSJsonTest methodsFor: 'tests' stamp: 'lr 9/22/2009 10:51'!testStringify	self 		assert: (self json stringify: self mock)		equals: 'JSON.stringify(mock)'.	self 		assert: (self json stringify: self mock space: 4)		equals: 'JSON.stringify(mock,4)'.	self 		assert: (self json stringify: self mock replacer: #())		equals: 'JSON.stringify(mock,[])'.	self 		assert: (self json stringify: self mock replacer: #() space: ' ')		equals: 'JSON.stringify(mock,[]," ")'! !!JSJsonTest methodsFor: 'accessing' stamp: 'lr 9/22/2009 10:45'!json	^ JSJson context: self renderContext! !JSObjectTest subclass: #JSLoggingTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!!JSLoggingTest methodsFor: 'accessing' stamp: 'jf 7/19/2009 14:58'!logger	^ JSLogger context: self renderContext! !!JSLoggingTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:06'!testComparison	self		assert: (self logger assert: 1 equals: 1)		equals: 'console.assertEquals(1,1)'.	self		assert: (self logger assert: 1 notEquals: 2)		equals: 'console.assertNotEquals(1,2)'.	self		assert: (self logger assert: 1 greater: 2)		equals: 'console.assertGreater(1,2)'.	self		assert: (self logger assert: 2 notGreater: 1)		equals: 'console.assertNotGreater(2,1)'.	self		assert: (self logger assert: 2 less: 1)		equals: 'console.assertLess(2,1)'.	self		assert: (self logger assert: 1 notLess: 2)		equals: 'console.assertNotLess(1,2)'! !!JSLoggingTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:06'!testMessages	self		assert: (self logger debug: 3)		equals: 'console.debug(3)'.	self		assert: (self logger info: 'eye m here 2')		equals: 'console.info("eye m here 2")'.	self		assert: (self logger warn: 'don"t 4get ur grlfrnd')		equals: 'console.warn("don\"t 4get ur grlfrnd")'.	self		assert: (self logger error: 'gone gone gone')		equals: 'console.error("gone gone gone")'! !!JSLoggingTest methodsFor: 'tests' stamp: 'lr 4/28/2009 20:41'!testAssert	self 		assert: (self logger assert: true)		equals: 'console.assert(true)'.	self		assert: (self logger assertTrue: true)		equals: 'console.assertTrue(true)'.	self 		assert: (self logger assertFalse: false)		equals: 'console.assertFalse(false)'.	self		assert: (self logger assertNull: nil)		equals: 'console.assertNull(null)'.	self		assert: (self logger assertNotNull: 1)		equals: 'console.assertNotNull(1)'.	self		assert: (self logger assertUndefined: nil)		equals: 'console.assertUndefined(null)'.	self		assert: (self logger assertNotUndefined: 1)		equals: 'console.assertNotUndefined(1)'! !!JSLoggingTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:06'!testLogging	self		assert: (self logger log: 'done')		equals: 'console.log("done")'.	self		assert: (self logger log: 'done %s and %s' format: #( 'this' 'that' ))		equals: 'console.log("done %s and %s","this","that")'! !JSObjectTest subclass: #JSRenderingTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!!JSRenderingTest methodsFor: 'tests' stamp: 'pmm 8/23/2014 09:43'!testScript	self 		assert: [ :html | html div script: self mock ]		renders: '<div></div><script type="text/javascript">mock;</script>'! !!JSRenderingTest methodsFor: 'tests' stamp: 'lr 4/28/2009 20:29'!testLogger	self 		assert: [ :html | html div onClick: (html logger log: 'Foo') ]		renders: '<div onclick="console.log(&quot;Foo&quot;)"></div>'! !!JSRenderingTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:29'!testAddToEvent	self 		assert: [ :html | html div onClick: self mock ]		renders: '<div onclick="mock"></div>'.	self 		assert: [ :html | html div onMouseOut: self mock ]		renders: '<div onmouseout="mock"></div>'.	self 		assert: [ :html | html div onKeyUp: self mock ]		renders: '<div onkeyup="mock"></div>'! !!JSRenderingTest methodsFor: 'tests' stamp: 'pmm 8/23/2014 09:43'!testAddToScript	self 		assert: [ :html | html script: self mock ]		renders: '<script type="text/javascript">mock</script>'! !!JSRenderingTest methodsFor: 'tests' stamp: 'lr 5/5/2009 00:19'!testScriptOn	self 		assert: [ :html | html html: (html javascript script: [ :s | ]) ]		renders: ''.	self 		assert: [ :html | html html: (html javascript script: [ :s | s add: self mock ]) ]		renders: 'mock'.	self 		assert: [ :html | html html: (html javascript script: [ :s | s add: self mock; add: self mock ]) ]		renders: 'mock;mock'! !!JSRenderingTest methodsFor: 'tests' stamp: 'lr 5/5/2009 00:19'!testRenderOn	self 		assert: [ :html | html html: (html javascript render: 123) ]		renders: '123'.	self 		assert: [ :html | html html: (html javascript render: 'abc') ]		renders: 'abc'.	self 		assert: [ :html | html html: (html javascript render: [ :h | h div ]) ]		renders: '<div></div>'! !!JSRenderingTest methodsFor: 'tests' stamp: 'lr 4/28/2009 20:31'!testPassenger	self 		assert: [ :html | html div passenger: self ]		renders: '<div id="id1"></div>'.	self 		assert: [ :html | 			html div passenger: self.			html div passenger: self class ]		renders: '<div id="id1"></div><div id="id2"></div>'! !!JSRenderingTest methodsFor: 'tests' stamp: 'lr 4/28/2009 20:30'!testJavascript	self 		assert: [ :html | html div onClick: (html javascript add: self mock; add: self mock; yourself) ]		renders: '<div onclick="mock;mock"></div>'! !JSObjectTest subclass: #JSScriptTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!!JSScriptTest methodsFor: 'tests' stamp: 'lr 4/28/2009 20:11'!testEmpty	self assert: self script equals: ''! !!JSScriptTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:14'!testConvert	self		assert: self function		equals: 'function(){}'.	self		assert: self function asFunction		equals: 'function(){}'.	self 		assert: 'alert("1")' asFunction		equals: 'function(){alert("1")}'! !!JSScriptTest methodsFor: 'accessing' stamp: 'jf 7/19/2009 14:56'!script	^ JSScript context: self renderContext! !!JSScriptTest methodsFor: 'accessing' stamp: 'jf 7/19/2009 14:56'!function	^ JSFunction context: self renderContext! !!JSScriptTest methodsFor: 'tests-compose' stamp: 'lr 4/28/2009 20:11'!testAdd	| script element |	script := self script.	element := self stream nextPutAll: 'foo'.	self assert: (script add: element) == element.	self assert: script equals: 'foo'.	element := self stream nextPutAll: 'bar'.	self assert: (script add: element) == element.	self assert: script equals: 'foo;bar'! !!JSScriptTest methodsFor: 'tests-compose' stamp: 'lr 4/28/2009 20:11'!testComma	| script element |	script := self script.	element := self stream nextPutAll: 'foo'.	self assert: (script , element) == script.	self assert: script equals: 'foo'.	element := self stream nextPutAll: 'bar'.	self assert: (script , element) == script.	self assert: script equals: 'foo;bar'! !!JSScriptTest methodsFor: 'tests-compose' stamp: 'lr 4/28/2009 20:11'!testShift	| script element |	script := self script.	element := self stream nextPutAll: 'foo'.	self assert: (script << element) == element.	self assert: script equals: 'foo'.	element := self stream nextPutAll: 'bar'.	self assert: (script << element) == element.	self assert: script equals: 'foo;bar'! !!JSScriptTest methodsFor: 'tests-compose' stamp: 'lr 4/28/2009 20:11'!testAddAll	| script elements |	script := self script.	elements := Array 		with: (self stream nextPutAll: 'foo')		with: (self stream nextPutAll: 'bar').	self assert: (script addAll: elements) == elements.	self assert: script equals: 'foo;bar'! !!JSScriptTest methodsFor: 'tests-function' stamp: 'lr 4/28/2009 20:40'!testArguments	self		assert: (self function arguments: #(a))		equals: 'function(a){}'.	self		assert: (self function arguments: #(a b))		equals: 'function(a,b){}'! !!JSScriptTest methodsFor: 'tests-function' stamp: 'lr 4/28/2009 20:39'!testAsFunction	self		assert: (self script asFunction: #(a))		equals: 'function(a){}'.	self		assert: (self function asFunction: #(a b))		equals: 'function(a,b){}'! !!JSScriptTest methodsFor: 'tests-function' stamp: 'lr 4/28/2009 20:40'!testArgument	| function |	function := self function arguments: #(a b c).	self assert: (function argument = #(a b c)).	self assert: (function arguments = #(a b c))! !!JSScriptTest methodsFor: 'tests-function' stamp: 'lr 4/28/2009 20:12'!testReturn	| function |	function := self function.	function add: (self stream nextPutAll: 'foo').	function add: (self stream nextPutAll: 'bar').	function add: (self stream nextPutAll: 'baz').	self assert: function equals: 'function(){foo;bar;baz}'.	function := self function return: true.	function add: (self stream nextPutAll: 'foo').	function add: (self stream nextPutAll: 'bar').	function add: (self stream nextPutAll: 'baz').	self assert: function equals: 'function(){foo;bar;return baz}'! !!JSScriptTest methodsFor: 'tests-utilities' stamp: 'lr 4/28/2009 20:26'!testLogger	self assert: (self script logger log: 'Hello Wold') equals: 'console.log("Hello Wold")'! !!JSScriptTest methodsFor: 'tests-utilities' stamp: 'lr 4/28/2009 20:14'!testRefresh	self assert: self script refresh equals: 'window.location="http://www.seaside.st/?_s=1&_k=a"'! !!JSScriptTest methodsFor: 'tests-utilities' stamp: 'lr 4/28/2009 20:13'!testGoto	self assert: (self script goto: 'http://www.seaside.st') equals: 'window.location="http://www.seaside.st"'! !!JSScriptTest methodsFor: 'tests-utilities' stamp: 'lr 4/28/2009 20:14'!testCallback	self assert: (self script callback: [ ]) equals: 'window.location="http://www.seaside.st/?_s=1&_k=a&1"'! !!JSScriptTest methodsFor: 'tests-utilities' stamp: 'lr 4/28/2009 20:13'!testAlert	self assert: (self script alert: 'Be Alert') equals: 'alert("Be Alert")'! !JSObjectTest subclass: #JSStreamTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Javascript-Tests-Core'!!JSStreamTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:13'!testCopy	| stream1 stream2 |	stream1 := self stream nextPutAll: 'foo'.	stream2 := stream1 copy nextPutAll: 'bar'.	stream1 nextPutAll: 'zork'.	self assert: stream1 contents = 'foozork'.	self assert: stream2 contents = 'foobar'! !!JSStreamTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:13'!testArguments	| stream |	stream := self stream arguments: #(1 2 3).	self assert: stream contents = '(1,2,3)'! !!JSStreamTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:13'!testNextPutAll	| stream |	stream := self stream nextPutAll: 'foo'.	self assert: stream contents = 'foo'! !!JSStreamTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:13'!testArgument	| stream |	stream := self stream argument: 1.	self assert: stream contents = '(1)'! !!JSStreamTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:13'!testNextPut	| stream |	stream := self stream nextPut: $f.	self assert: stream contents = 'f'! !!JSStreamTest methodsFor: 'tests' stamp: 'lr 10/13/2008 22:13'!testJavascript	| stream |	stream := self stream javascript: #(1 2).	self assert: stream contents = '[1,2]'! !!JSStreamTest methodsFor: 'tests-constructor' stamp: 'lr 4/28/2009 19:59'!testNewArgumentAt	self assert: (JSStream argumentAt: 1) equals: 'arguments[0]'.	self assert: (JSStream argumentAt: 2) equals: 'arguments[1]'.	self deny: (JSStream argumentAt: 1) == (JSStream argument: 1)! !!JSStreamTest methodsFor: 'tests-constructor' stamp: 'lr 4/28/2009 19:58'!testNewArgument	self assert: (JSStream argument: 0) equals: 'arguments[0]'.	self assert: (JSStream argument: 1) equals: 'arguments[1]'.	self deny: (JSStream argument: 1) == (JSStream argument: 1)! !!JSStreamTest methodsFor: 'tests-constructor' stamp: 'lr 4/28/2009 19:58'!testNewThis	self assert: JSStream this equals: 'this'.	self deny: JSStream this == JSStream this! !!JSStreamTest methodsFor: 'tests-constructor' stamp: 'lr 4/28/2009 19:58'!testNewOn	self assert: (JSStream on: 'mock') equals: 'mock'! !!JSStreamTest methodsFor: 'tests-encoding' stamp: 'lr 4/15/2010 20:27'!testEncodeKeyValueOn	| actual |	actual := String streamContents: [ :stream |		JSStream encodeKey: 'key' value: 'value' on: stream ].	self assert: actual = '"key":"value"'! !!JSStreamTest methodsFor: 'tests-literals' stamp: 'lr 2/2/2010 22:43'!testCharacter	self assert: $a equals: '"a"'! !!JSStreamTest methodsFor: 'tests-literals' stamp: 'lr 2/2/2010 21:58'!testStringSpecial	self assert: (String with: Character cr) equals: '"\r"'.	self assert: (String with: Character lf) equals: '"\n"'.	self assert: (String with: Character tab) equals: '"\t"'.	self assert: (String with: (Character codePoint: 0)) equals: '"\0"'.	self assert: (String with: (Character codePoint: 1)) equals: '"\x01"'.	self assert: (String with: (Character codePoint: 31)) equals: '"\x1f"'! !!JSStreamTest methodsFor: 'tests-literals' stamp: 'lr 2/2/2010 21:58'!testStringEscaping	self assert: '''' equals: '"''"'.	self assert: '"' equals: '"\""'.	self assert: '\' equals: '"\\"'! !!JSStreamTest methodsFor: 'tests-literals' stamp: 'lr 2/2/2010 21:58'!testLiteral	self assert: true equals: 'true'.	self assert: false equals: 'false'.	self assert: nil equals: 'null'! !!JSStreamTest methodsFor: 'tests-literals' stamp: 'pmm 9/1/2012 15:56'!testNumber	self assert: 123 equals: '123'.	self assert: 123.4 equals: '123.4'! !!JSStreamTest methodsFor: 'tests-literals' stamp: 'lr 2/2/2010 21:58'!testStringBasic	self assert: 'abc' equals: '"abc"'.	self assert: '123' equals: '"123"'! !